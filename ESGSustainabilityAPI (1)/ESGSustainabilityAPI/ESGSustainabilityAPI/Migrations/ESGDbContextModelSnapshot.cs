// <auto-generated />
using System;
using ESGSustainabilityAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ESGSustainabilityAPI.Migrations
{
    [DbContext(typeof(ESGDbContext))]
    partial class ESGDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("ESGSustainabilityAPI.Models.CarbonEmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EmissionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RecordDate");

                    b.ToTable("CarbonEmissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Escopo 2",
                            CompanyId = 1,
                            CreatedAt = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Emissões provenientes do consumo de energia elétrica do escritório principal",
                            EmissionAmount = 15.5m,
                            Location = "São Paulo - SP",
                            RecordDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Source = "Energia Elétrica",
                            Unit = "tCO2e",
                            UpdatedAt = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ESGSustainabilityAPI.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Av. Paulista, 1000",
                            CNPJ = "12.345.678/0001-90",
                            City = "São Paulo",
                            ContactEmail = "contato@ecotech.com.br",
                            ContactPhone = "(11) 99999-9999",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeCount = 150,
                            Industry = "Tecnologia",
                            Name = "EcoTech Solutions Ltda",
                            State = "SP",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ZipCode = "01310-100"
                        });
                });

            modelBuilder.Entity("ESGSustainabilityAPI.Models.EnergyConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ConsumptionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CostCurrency")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("EnergyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("RenewablePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnergyType");

                    b.HasIndex("RecordDate");

                    b.ToTable("EnergyConsumptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            ConsumptionAmount = 2500.0m,
                            Cost = 1250.0m,
                            CostCurrency = "BRL",
                            CreatedAt = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Consumo mensal do escritório principal",
                            EnergyType = "Elétrica",
                            RecordDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RenewablePercentage = 35.0m,
                            Source = "Rede Elétrica",
                            Unit = "kWh",
                            UpdatedAt = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ESGSustainabilityAPI.Models.SustainabilityReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Challenges")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ESGScore")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("EnvironmentalInitiatives")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FutureGoals")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GovernanceInitiatives")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quarter")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("RenewableEnergyPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SocialInitiatives")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalCarbonEmissions")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalEnergyConsumption")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WasteGenerated")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WasteRecycled")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WaterConsumption")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ESGScore");

                    b.HasIndex("Year", "Quarter");

                    b.ToTable("SustainabilityReports");
                });

            modelBuilder.Entity("ESGSustainabilityAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Role");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@ecotech.com.br",
                            FirstName = "Administrador",
                            IsActive = true,
                            LastName = "Sistema",
                            PasswordHash = "$2a$11$/sE5A5UoHQd8paczSIJgjelIVrZjIhoxnPAITJlxB2bKLcmJ5fvSq",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "manager@ecotech.com.br",
                            FirstName = "Gerente",
                            IsActive = true,
                            LastName = "ESG",
                            PasswordHash = "$2a$11$mQaOGi34WyMUorJCpcf3bOsik7fwnUHVP6hr6VaQRp4bYmiUdw9O.",
                            Role = "Manager",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Username = "manager"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "user@ecotech.com.br",
                            FirstName = "Usuário",
                            IsActive = true,
                            LastName = "Padrão",
                            PasswordHash = "$2a$11$S6aUyIVe9V4NRrclikBdaOf6VppRdPg.0Qh/14aTpHMXmG52n6cGK",
                            Role = "User",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Username = "user"
                        });
                });

            modelBuilder.Entity("ESGSustainabilityAPI.Models.CarbonEmission", b =>
                {
                    b.HasOne("ESGSustainabilityAPI.Models.Company", "Company")
                        .WithMany("CarbonEmissions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ESGSustainabilityAPI.Models.EnergyConsumption", b =>
                {
                    b.HasOne("ESGSustainabilityAPI.Models.Company", "Company")
                        .WithMany("EnergyConsumptions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ESGSustainabilityAPI.Models.SustainabilityReport", b =>
                {
                    b.HasOne("ESGSustainabilityAPI.Models.Company", "Company")
                        .WithMany("SustainabilityReports")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ESGSustainabilityAPI.Models.User", b =>
                {
                    b.HasOne("ESGSustainabilityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ESGSustainabilityAPI.Models.Company", b =>
                {
                    b.Navigation("CarbonEmissions");

                    b.Navigation("EnergyConsumptions");

                    b.Navigation("SustainabilityReports");
                });
#pragma warning restore 612, 618
        }
    }
}
